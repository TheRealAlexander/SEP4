name: Build and Test IoT

on:
  push:
    paths:
      - 'iot/**'
  pull_request:
    paths:
      - 'iot/**'

jobs:
  compile:
    name: Compile IoT Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Cache AVR-GCC Dependencies
        uses: actions/cache@v3
        with:
          path: /usr/lib/avr
          key: ${{ runner.os }}-gcc-avr-cache
          restore-keys: ${{ runner.os }}-gcc-avr-
      
      - name: Install AVR-GCC
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-avr avr-libc
      
      - name: Compile with AVR-GCC
        run: |
          cd iot
          ./build-main.sh

  test:
    name: Run IoT Tests
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Cache Test Results
        uses: actions/cache@v3
        with:
          path: iot/tests
          key: ${{ runner.os }}-iot-tests-cache
          restore-keys: ${{ runner.os }}-iot-tests-
      
      - name: Run Tests
        id: run_tests
        run: |
          cd iot
          ./build-and-test.sh
    outputs:
      test_success: ${{ steps.run_tests.outcome }}

  upload:
    name: Upload Main Hex File
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test_success == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Upload Main Hex File
        uses: actions/upload-artifact@v2
        with:
          name: main-hex-file
          path: iot/build/main.hex

  notify:
    name: Notify PR with Build and Test Results
    runs-on: ubuntu-latest
    needs: [compile, test, upload]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set Message
        id: set_message
        run: |
          link="Workflow Run: [Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          if [ "${{ needs.compile.result }}" != "success" ]; then
            message="$link - Build failed. Please check the logs for errors."
          elif [ "${{ needs.test.outputs.test_success }}" != "success" ]; then
            message="$link - Tests failed. Please check the test logs."
          else
            message="$link - Build and tests succeeded!"
          fi
          echo "result_message=$message" >> $GITHUB_ENV
      
      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: ${{ env.result_message }}
          reactions: "eyes, rocket"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
